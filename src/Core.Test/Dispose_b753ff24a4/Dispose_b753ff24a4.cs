// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using System;
using System.Net.Http;
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class Dispose_b753ff24a4
    {
        private Transport _transport;

        [SetUp]
        public void SetUp()
        {
            var httpClientHandler = new HttpClientHandler();
            httpClientHandler.AllowAutoRedirect = false;

            // Use HttpClientHandler to avoid real Http calls in tests
            _transport = new Transport(httpClientHandler);
        }

        [Test]
        public void Dispose_DisposesHttpClient_Success()
        {
            // Arrange
            // Transport instance is created in SetUp

            // Act
            _transport.Dispose();

            // Assert
            // Using reflection to check if the HttpClient is disposed
            var httpClientField = typeof(Transport).GetField("httpClient", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var httpClient = (HttpClient)httpClientField.GetValue(_transport);
            Assert.Throws<ObjectDisposedException>(() => httpClient.GetAsync("http://localhost").GetAwaiter().GetResult());
        }

        [Test]
        public void Dispose_CalledMultipleTimes_ThrowsNoException()
        {
            // Arrange
            // Transport instance is created in SetUp

            // Act & Assert
            Assert.DoesNotThrow(() => _transport.Dispose());
            Assert.DoesNotThrow(() => _transport.Dispose()); // Called second time
        }

        [TearDown]
        public void TearDown()
        {
            // Clean up
            _transport?.Dispose();
        }
    }
}

// TODO: Replace httpClientHandler with a mock that implements HttpMessageHandler to avoid real HTTP calls

