// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SwissTransport.Models;
using SwissTransport.Core;
using NUnit.Framework;
using Moq;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class Dispose_b753ff24a4
    {
        private Mock<HttpMessageHandler> _mockHttpMessageHandler;
        private Transport _transport;

        [SetUp]
        public void Setup()
        {
            _mockHttpMessageHandler = new Mock<HttpMessageHandler>();
            var httpClient = new HttpClient(_mockHttpMessageHandler.Object);
            _transport = new Transport(httpClient);
        }

        [Test]
        public void Dispose_DisposeCalled_HttpClientDisposed()
        {
            // Arrange
            var httpClientDisposed = false;
            _mockHttpMessageHandler.Setup(x => x.Dispose()).Callback(() => httpClientDisposed = true);

            // Act
            _transport.Dispose();

            // Assert
            Assert.IsTrue(httpClientDisposed, "HttpClient was not disposed after Dispose was called.");
        }

        [Test]
        public void Dispose_DisposeCalledTwice_HttpClientDisposedOnce()
        {
            // Arrange
            var disposeCount = 0;
            _mockHttpMessageHandler.Setup(x => x.Dispose()).Callback(() => disposeCount++);

            // Act
            _transport.Dispose();
            _transport.Dispose();

            // Assert
            Assert.AreEqual(1, disposeCount, "HttpClient Dispose was called more than once.");
        }

        [TearDown]
        public void TearDown()
        {
            _transport = null;
            _mockHttpMessageHandler = null;
        }
    }
}
