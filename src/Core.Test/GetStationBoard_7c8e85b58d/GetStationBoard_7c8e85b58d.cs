// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using NUnit.Framework;
using Moq;
using Newtonsoft.Json;
using SwissTransport.Models;
using SwissTransport.Core;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStationBoard_7c8e85b58d
    {
        private Mock<HttpMessageHandler> _mockHttpMessageHandler;
        private HttpClient _httpClient;
        private Transport _transport;

        [SetUp]
        public void Setup()
        {
            _mockHttpMessageHandler = new Mock<HttpMessageHandler>();
            _httpClient = new HttpClient(_mockHttpMessageHandler.Object);
            _transport = new Transport(_httpClient);
        }

        [Test]
        public void GetStationBoard_WithNullStation_ShouldThrowArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => _transport.GetStationBoard(null, "id"));
        }

        [Test]
        public void GetStationBoard_WithEmptyStation_ShouldThrowArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => _transport.GetStationBoard(string.Empty, "id"));
        }

        [Test]
        public void GetStationBoard_WithNullId_ShouldThrowArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => _transport.GetStationBoard("station", null));
        }

        [Test]
        public void GetStationBoard_WithEmptyId_ShouldThrowArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => _transport.GetStationBoard("station", string.Empty));
        }

        [Test]
        public void GetStationBoard_WithValidStationAndId_ShouldReturnCorrectResult()
        {
            var mockStationBoardRoot = new StationBoardRoot
            {
                Station = new Station { Id = "id", Name = "station" },
                Entries = new List<StationBoard>
                {
                    new StationBoard { Name = "name", Category = "category", Number = "number", To = "to", Operator = "operator" }
                }
            };

            var mockResponse = new HttpResponseMessage(System.Net.HttpStatusCode.OK)
            {
                Content = new StringContent(JsonConvert.SerializeObject(mockStationBoardRoot))
            };

            _mockHttpMessageHandler.Setup(m => m.Send(It.IsAny<HttpRequestMessage>())).Returns(mockResponse);

            var result = _transport.GetStationBoard("station", "id");

            Assert.AreEqual(result, mockStationBoardRoot);
        }
    }
}
