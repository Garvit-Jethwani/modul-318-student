// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;
using System;
using System.Net.Http;
using RichardSzalay.MockHttp;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStationBoard_7c8e85b58d
    {
        private MockHttpMessageHandler mockHttp;
        private string webApiHost;
        private Transport transport;

        [SetUp]
        public void SetUp()
        {
            webApiHost = "https://transport.opendata.ch/v1/";
            mockHttp = new MockHttpMessageHandler();

            // Mock the responses for HTTP calls
            mockHttp.When($"{webApiHost}stationboard?station=*&id=*")
                    .Respond("application/json", "{'stationboard': []}"); // TODO: replace with actual json response

            var httpClient = new HttpClient(mockHttp);
            transport = new Transport(httpClient);
        }

        [Test]
        public void GetStationBoard_ValidRequest_ReturnsStationBoardRoot()
        {
            // Arrange
            string station = "Zurich"; // TODO: replace with valid station name
            string id = "8503000"; // TODO: replace with valid id
            
            // Act
            var result = transport.GetStationBoard(station, id);

            // Assert
            Assert.IsNotNull(result);
            Assert.IsInstanceOf<StationBoardRoot>(result);
        }

        [Test]
        public void GetStationBoard_StationIsNull_ThrowsArgumentNullException()
        {
            // Arrange
            string station = null;
            string id = "8503000"; // TODO: replace with valid id

            // Assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.That(ex.ParamName, Is.EqualTo("station"));
        }

        [Test]
        public void GetStationBoard_IdIsNull_ThrowsArgumentNullException()
        {
            // Arrange
            string station = "Zurich"; // TODO: replace with valid station name
            string id = null;

            // Assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.That(ex.ParamName, Is.EqualTo("id"));
        }

        [Test]
        public void GetStationBoard_StationAndIdAreEmpty_ThrowsArgumentNullException()
        {
            // Arrange
            string station = "";
            string id = "";

            // Assert
            Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
        }

        [TearDown]
        public void TearDown()
        {
            transport?.Dispose();
        }
    }
}

