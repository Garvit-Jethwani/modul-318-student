// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStationBoard_7c8e85b58d
    {
        private const string WebApiHost = "https://transport.opendata.ch/v1/";
        private Transport transport;

        [SetUp]
        public void SetUp()
        {
            transport = new Transport();
        }

        [TearDown]
        public void TearDown()
        {
            transport.Dispose();
        }

        [Test]
        public void GetStationBoard_ValidStationAndId_ReturnsStationBoardRoot()
        {
            // arrange
            string station = "Zurich";
            string id = "1";

            // act
            StationBoardRoot result = transport.GetStationBoard(station, id);

            // assert
            Assert.IsNotNull(result);
            Assert.AreEqual(station, result.Station.Name);
            Assert.AreEqual(id, result.Station.Id);
        }

        [Test]
        public void GetStationBoard_NullStation_ThrowsArgumentNullException()
        {
            // arrange
            string station = null;
            string id = "1";

            // act and assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.AreEqual("station", ex.ParamName);
        }

        [Test]
        public void GetStationBoard_NullId_ThrowsArgumentNullException()
        {
            // arrange
            string station = "Zurich";
            string id = null;

            // act and assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.AreEqual("id", ex.ParamName);
        }

        [Test]
        public void GetStationBoard_EmptyStation_ThrowsArgumentNullException()
        {
            // arrange
            string station = "";
            string id = "1";

            // act and assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.AreEqual("station", ex.ParamName);
        }

        [Test]
        public void GetStationBoard_EmptyId_ThrowsArgumentNullException()
        {
            // arrange
            string station = "Zurich";
            string id = "";

            // act and assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStationBoard(station, id));
            Assert.AreEqual("id", ex.ParamName);
        }
    }
}
