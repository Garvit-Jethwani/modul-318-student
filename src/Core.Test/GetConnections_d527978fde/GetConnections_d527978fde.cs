// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using Moq;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SwissTransport.Models;
using SwissTransport.Core;
using System.Net;

namespace SwissTransport.Core.Tests
{
    [TestFixture]
    public class GetConnections_d527978fde
    {
        private Mock<HttpMessageHandler> _mockHttpMessageHandler;
        private HttpClient _httpClient;
        private Transport _transport;

        [SetUp]
        public void Setup()
        {
            _mockHttpMessageHandler = new Mock<HttpMessageHandler>();
            _httpClient = new HttpClient(_mockHttpMessageHandler.Object);
            _transport = new Transport(_httpClient);
        }

        [Test]
        public void GetConnections_WhenCalledWithValidStations_ReturnsExpectedConnections()
        {
            // Arrange
            var expectedConnections = new Connections
            {
                ConnectionList = new List<Connection>
                {
                    new Connection
                    {
                        From = new ConnectionPoint
                        {
                            Station = new Station
                            {
                                Name = "Station1"
                            }
                        },
                        To = new ConnectionPoint
                        {
                            Station = new Station
                            {
                                Name = "Station2"
                            }
                        },
                        Duration = "00:30:00"
                    }
                }
            };

            var httpResponseMessage = new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(JsonConvert.SerializeObject(expectedConnections))
            };

            _mockHttpMessageHandler.Setup(m => m.Send(It.IsAny<HttpRequestMessage>())).Returns(httpResponseMessage);

            // Act
            var result = _transport.GetConnections("Station1", "Station2");

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(expectedConnections.ConnectionList.Count, result.ConnectionList.Count);
            Assert.AreEqual(expectedConnections.ConnectionList[0].From.Station.Name, result.ConnectionList[0].From.Station.Name);
            Assert.AreEqual(expectedConnections.ConnectionList[0].To.Station.Name, result.ConnectionList[0].To.Station.Name);
            Assert.AreEqual(expectedConnections.ConnectionList[0].Duration, result.ConnectionList[0].Duration);
        }

        [Test]
        public void GetConnections_WhenCalledWithInvalidStations_ThrowsArgumentNullException()
        {
            // Assert
            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(null, "Station2"));
            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections("Station1", null));
        }
    }
}
