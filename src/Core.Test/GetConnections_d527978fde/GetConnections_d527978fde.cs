// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;
using Moq;
using Moq.Protected;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetConnections_d527978fde
    {
        private Mock<HttpMessageHandler> _mockHttpMessageHandler;
        private HttpClient _httpClient;
        private Transport _transport;

        [SetUp]
        public void SetUp()
        {
            _mockHttpMessageHandler = new Mock<HttpMessageHandler>();
            _httpClient = new HttpClient(_mockHttpMessageHandler.Object);
            _transport = new Transport(_httpClient);
        }

        [TearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }

        [Test]
        public void GetConnections_ValidInput_ReturnsConnections()
        {
            // Arrange
            var fromStation = "Zurich";
            var toStation = "Bern";
            var expectedUri = new Uri($"https://transport.opendata.ch/v1/connections?from={fromStation}&to={toStation}");

            var mockConnections = new Connections();
            var mockResponse = new HttpResponseMessage(System.Net.HttpStatusCode.OK)
            {
                Content = new StringContent(JsonConvert.SerializeObject(mockConnections))
            };

            _mockHttpMessageHandler.Protected()
                .Setup<Task<HttpResponseMessage>>(
                    "SendAsync",
                    ItExpr.Is<HttpRequestMessage>(req => req.RequestUri == expectedUri),
                    ItExpr.IsAny<CancellationToken>()
                )
                .ReturnsAsync(mockResponse);

            // Act
            var result = _transport.GetConnections(fromStation, toStation);

            // Assert
            Assert.AreEqual(mockConnections, result);
        }

        [Test]
        public void GetConnections_EmptyFromStation_ThrowsArgumentNullException()
        {
            // Arrange
            var fromStation = string.Empty;
            var toStation = "Bern";

            // Act & Assert
            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
            Assert.That(ex.ParamName, Is.EqualTo("fromStation"));
        }

        [Test]
        public void GetConnections_EmptyToStation_ThrowsArgumentNullException()
        {
            // Arrange
            var fromStation = "Zurich";
            var toStation = string.Empty;

            // Act & Assert
            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
            Assert.That(ex.ParamName, Is.EqualTo("toStation"));
        }
    }
}
