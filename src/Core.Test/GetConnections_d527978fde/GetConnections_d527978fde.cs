// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SwissTransport.Models;
using SwissTransport.Core;
using NUnit.Framework;

namespace SwissTransport.Core.Test
{
    public class GetConnections_d527978fde
    {
        private Transport _transport;

        [SetUp]
        public void Setup()
        {
            _transport = new Transport();
        }

        [Test]
        public void GetConnections_ValidStations_ReturnsConnections()
        {
            var fromStation = "Zurich";
            var toStation = "Bern";

            var result = _transport.GetConnections(fromStation, toStation);

            Assert.IsNotNull(result);
            Assert.IsNotEmpty(result.ConnectionList);
        }

        [Test]
        public void GetConnections_EmptyFromStation_ThrowsArgumentNullException()
        {
            var fromStation = string.Empty;
            var toStation = "Bern";

            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
        }

        [Test]
        public void GetConnections_EmptyToStation_ThrowsArgumentNullException()
        {
            var fromStation = "Zurich";
            var toStation = string.Empty;

            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
        }

        [Test]
        public void GetConnections_NullFromStation_ThrowsArgumentNullException()
        {
            string fromStation = null;
            var toStation = "Bern";

            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
        }

        [Test]
        public void GetConnections_NullToStation_ThrowsArgumentNullException()
        {
            var fromStation = "Zurich";
            string toStation = null;

            Assert.Throws<ArgumentNullException>(() => _transport.GetConnections(fromStation, toStation));
        }

        [TearDown]
        public void TearDown()
        {
            _transport.Dispose();
        }
    }
}
