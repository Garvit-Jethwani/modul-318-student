// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using System;
using System.Net.Http;
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;
using RichardSzalay.MockHttp;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetConnections_d527978fde
    {
        private MockHttpMessageHandler mockHttp;
        private Transport transport;
        private const string WebApiHost = "https://transport.opendata.ch/v1/";

        [SetUp]
        public void SetUp()
        {
            mockHttp = new MockHttpMessageHandler();
            var httpClient = mockHttp.ToHttpClient();
            httpClient.BaseAddress = new Uri(WebApiHost);
            transport = new Transport(httpClient);
        }

        [Test]
        public void GetConnections_ValidStations_ReturnsConnections()
        {
            // Arrange
            string fromStation = "Zurich";
            string toStation = "Bern";
            string expectedUri = $"{WebApiHost}connections?from={fromStation}&to={toStation}";
            mockHttp.When(expectedUri)
                    .Respond("application/json", "{'connections':[]}");

            // Act
            var result = transport.GetConnections(fromStation, toStation);

            // Assert
            Assert.IsNotNull(result);
            Assert.IsInstanceOf<Connections>(result);
        }

        [Test]
        public void GetConnections_InvalidFromStation_ThrowsArgumentNullException()
        {
            // Arrange
            string fromStation = "";
            string toStation = "Bern";

            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() => transport.GetConnections(fromStation, toStation));
            Assert.AreEqual("fromStation", exception.ParamName);
        }

        [Test]
        public void GetConnections_InvalidToStation_ThrowsArgumentNullException()
        {
            // Arrange
            string fromStation = "Zurich";
            string toStation = "";

            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() => transport.GetConnections(fromStation, toStation));
            Assert.AreEqual("toStation", exception.ParamName);
        }

        [TestFixtureTearDown]
        public void Cleanup()
        {
            transport?.Dispose();
        }
    }   
}

