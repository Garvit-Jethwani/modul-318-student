// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using NUnit.Framework;
using SwissTransport.Core;
using SwissTransport.Models;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStations_7bfec3227d
    {
        private Transport _transport;
        private HttpClient _httpClientMock;

        [SetUp]
        public void SetUp()
        {
            // Initialize the mocked HttpClient and Transport instance
            _httpClientMock = new HttpClient(new HttpMessageHandlerMock());
            _transport = new Transport();
        }

        [TearDown]
        public void TearDown()
        {
            _transport.Dispose();
        }

        [Test]
        public void GetStations_WithValidQuery_ShouldReturnStations()
        {
            // Arrange
            var expectedUri = new Uri("https://transportapi.com/v3/locations?query=Zurich");
            var validQuery = "Zurich";
            var expectedStations = new Stations
            {
                StationList = new System.Collections.Generic.List<Station>
                {
                    new Station { Name = "Zurich", Id = "8503000" }
                }
            };
            HttpMessageHandlerMock.SetMockResponse(expectedUri, expectedStations);

            // Act
            var result = _transport.GetStations(validQuery);

            // Assert
            Assert.IsNotNull(result);
            Assert.IsInstanceOf<Stations>(result);
            Assert.AreEqual(expectedStations.StationList.Count, result.StationList.Count);
            Assert.AreEqual(expectedStations.StationList[0].Name, result.StationList[0].Name);
        }

        [Test]
        public void GetStations_WithEmptyQuery_ShouldThrowArgumentNullException()
        {
            // Arrange
            var invalidQuery = "";

            // Act & Assert
            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetStations(invalidQuery));
            Assert.That(ex.ParamName, Is.EqualTo("query"));
        }

        // TODO: Additional test cases such as null query, unexpected response, etc. can be added here

        private class HttpMessageHandlerMock : HttpMessageHandler
        {
            private static HttpResponseMessage _mockResponse;

            public static void SetMockResponse(Uri requestUri, object responseObject)
            {
                var json = JsonConvert.SerializeObject(responseObject);
                _mockResponse = new HttpResponseMessage
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    Content = new StringContent(json)
                };
            }

            protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
            {
                if (request.RequestUri == _mockResponse.RequestMessage.RequestUri)
                {
                    return Task.FromResult(_mockResponse);
                }

                return Task.FromResult(new HttpResponseMessage
                {
                    StatusCode = System.Net.HttpStatusCode.NotFound,
                    RequestMessage = request
                });
            }
        }
    }
}

