// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SwissTransport.Models;
using SwissTransport.Core;
using NUnit.Framework;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStations_7bfec3227d
    {
        private Transport _transport;
        private HttpClient _httpClient;

        [SetUp]
        public void SetUp()
        {
            _httpClient = new HttpClient();
            _transport = new Transport(_httpClient);
        }

        [Test]
        public void GetStations_ValidQuery_ReturnsStations()
        {
            const string query = "Zurich";

            Stations result = _transport.GetStations(query);

            Assert.IsNotNull(result);
            Assert.IsNotEmpty(result.StationList);
            Assert.IsTrue(result.StationList.Exists(s => s.Name.Contains(query)));
        }

        [Test]
        public void GetStations_InvalidQuery_ThrowsException()
        {
            const string query = "InvalidQuery";

            var ex = Assert.Throws<Exception>(() => _transport.GetStations(query));

            StringAssert.Contains("No stations found", ex.Message);
        }

        [Test]
        public void GetStations_NullQuery_ThrowsArgumentNullException()
        {
            string query = null;

            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetStations(query));

            Assert.AreEqual("query", ex.ParamName);
        }

        [Test]
        public void GetStations_EmptyQuery_ThrowsArgumentNullException()
        {
            const string query = "";

            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetStations(query));

            Assert.AreEqual("query", ex.ParamName);
        }

        [TearDown]
        public void TearDown()
        {
            _transport.Dispose();
            _httpClient.Dispose();
        }
    }
}
