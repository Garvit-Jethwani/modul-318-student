// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using NUnit.Framework;
using System;
using SwissTransport.Core;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SwissTransport.Models;
using Rhino.Mocks;
using SwissTransport.Test;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStations_7bfec3227d
    {
        private Transport transport;
        private HttpClient httpClientMock;

        [SetUp]
        public void SetUp()
        {
            var httpClientFactoryMock = MockRepository.GenerateMock<IHttpClientFactory>();
            httpClientMock = MockRepository.GenerateMock<HttpClient>();
            httpClientFactoryMock.Stub(x => x.CreateClient(Arg<string>.Is.Anything)).Return(httpClientMock);
            transport = new Transport(httpClientFactoryMock);
        }

        [Test]
        public void GetStations_WithValidQuery_ReturnsStations()
        {
            // Arrange
            string query = "Zurich";
            string jsonResponse = "{\"stations\":[{\"id\":\"8503000\",\"name\":\"Zürich HB\"}]}";
            var uri = new Uri($"{Transport.WebApiHost}locations?query={query}");
            var httpResponseMessage = new HttpResponseMessage
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                Content = new StringContent(jsonResponse)
            };
            httpClientMock.Stub(x => x.GetAsync(uri)).Return(Task.FromResult(httpResponseMessage)); // TODO: Modify the response if needed

            // Expected object
            var expectedStations = new Stations
            {
                StationsList = new System.Collections.Generic.List<Station> { new Station { Id = "8503000", Name = "Zürich HB" } }
            };

            // Act
            var result = transport.GetStations(query);

            // Assert
            Assert.NotNull(result);
            Assert.AreEqual(expectedStations.StationsList.Count, result.StationsList.Count);
            Assert.AreEqual(expectedStations.StationsList[0].Id, result.StationsList[0].Id);
        }

        [Test]
        public void GetStations_WithEmptyQuery_ThrowsArgumentNullException()
        {
            // Arrange
            string query = string.Empty; // Empty query should throw an exception

            // Act & Assert
            var ex = Assert.Throws<ArgumentNullException>(() => transport.GetStations(query));
            Assert.AreEqual("query", ex.ParamName);
        }

        [TearDown]
        public void TearDown()
        {
            transport.Dispose();
            // Any additional cleanup can go here
        }
    }
}

