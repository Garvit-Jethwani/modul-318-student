// ********RoostGPT********
// Test generated by RoostGPT for test csharp-coding-examples using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using NUnit.Framework;
using Moq;
using SwissTransport.Models;
using SwissTransport.Core;

namespace SwissTransport.Core.Test
{
    [TestFixture]
    public class GetStations_7bfec3227d
    {
        private Mock<ITransport> _transportMock;
        private Transport _transport;
        private readonly string _webApiHost = "https://transport.opendata.ch/v1/";

        [SetUp]
        public void Setup()
        {
            _transportMock = new Mock<ITransport>();
            _transport = new Transport();
        }

        [Test]
        public void GetStations_NullQuery_ThrowsArgumentNullException()
        {
            // Arrange
            string query = null;

            // Assert
            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetStations(query));
            Assert.That(ex.ParamName, Is.EqualTo("query"));
        }

        [Test]
        public void GetStations_EmptyQuery_ThrowsArgumentNullException()
        {
            // Arrange
            string query = string.Empty;

            // Assert
            var ex = Assert.Throws<ArgumentNullException>(() => _transport.GetStations(query));
            Assert.That(ex.ParamName, Is.EqualTo("query"));
        }

        [Test]
        public void GetStations_ValidQuery_ReturnsStations()
        {
            // Arrange
            string query = "Zurich";
            var expectedStations = new Stations
            {
                StationList = new List<Station>
                {
                    new Station { Id = "1", Name = "Zurich HB", Score = 100, Distance = 0.0 },
                    new Station { Id = "2", Name = "Zurich Stadelhofen", Score = 90, Distance = 1.0 }
                }
            };

            _transportMock.Setup(t => t.GetStations(query)).Returns(expectedStations);

            // Act
            var actualStations = _transportMock.Object.GetStations(query);

            // Assert
            Assert.That(actualStations, Is.EqualTo(expectedStations));
        }

        [Test]
        public void GetStations_InvalidQuery_ReturnsEmptyStations()
        {
            // Arrange
            string query = "InvalidStation";
            var expectedStations = new Stations
            {
                StationList = new List<Station>()
            };

            _transportMock.Setup(t => t.GetStations(query)).Returns(expectedStations);

            // Act
            var actualStations = _transportMock.Object.GetStations(query);

            // Assert
            Assert.That(actualStations, Is.EqualTo(expectedStations));
        }

        [TearDown]
        public void TearDown()
        {
            _transport.Dispose();
        }
    }
}
